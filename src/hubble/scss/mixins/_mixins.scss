// Breakpoints
@mixin media-breakpoint-up($name)
{
	$width: map-get($breakpoints, $name);
	@if $width
    {
		@media (min-width: $width)
        {
			@content;
		}
	}
	@else
    {
		@media (min-width: $name)
        {
            @content;
        }
	}
}
@mixin media-breakpoint-down($name)
{
  	$width: map-get($breakpoints, $name);
	@if $width
    {
		@media (max-width: $width){
			@content;
		}
	}
	@else
    {
        @media (max-width: $name){
            @content;
        }
	}
}

// Retina
@mixin media-retina($ratio : 1.25)
{
    @media only screen and (-o-min-device-pixel-ratio: $ratio),
       only screen and (-webkit-min-device-pixel-ratio: $ratio),
       only screen and (min--moz-device-pixel-ratio: $ratio),
       only screen and (min-device-pixel-ratio: $ratio),
       only screen and (min-resolution: #{$ratio}dppx)
    {
        @content;
    }
}

// Raised
@mixin raised($level : 1)
{
    @if $level == 1
    {
        box-shadow: $raised-level-one;
        transition: box-shadow $base-easing-time $base-easing;
        &:hover
        {
            box-shadow: $raised-level-one-hover;
        }
        &:active
        {
            box-shadow: none;
        }
    }
    @else if $level == 2
    {
        box-shadow: $raised-level-two;
        transition: box-shadow $base-easing-time $base-easing;
        &:hover
        {
            box-shadow: $raised-level-two-hover;
        }
        &:active
        {
            box-shadow: none;
        }
    }
    @else if $level == 3
    {
        box-shadow: $raised-level-three;
        transition: box-shadow $base-easing-time $base-easing;
        &:hover
        {
            box-shadow: $raised-level-three-hover;
        }
        &:active
        {
            box-shadow: none;
        }
    }
}

@mixin raise($varname, $level : 1, $color: #000000)
{
    @if $level == 1
    {
        #{$varname} : 0px 2px 1px -1px toRGBA(_darker($color, 30), 0.2), 0px 1px 1px 0px toRGBA(_darker($color, 30), 0.14), 0px 1px 3px 0px toRGBA(_darker($color, 30), 0.12);
        #{$varname}-hover : 0 1px 1px toRGBA(_darker($color, 30), 0.16), 0 1px 3px toRGBA(_darker($color, 30), 0.23);
        #{$varname}-active : none;
        transition: box-shadow $base-easing-time $base-easing;
    }
    @else if $level == 2
    {
        #{$varname} :  0 1px 3px toRGBA(_darker($color, 30), 0.12), 0 1px 2px toRGBA(_darker($color, 30), 0.24);
        #{$varname}-hover : 0 3px 6px toRGBA(_darker($color, 30), 0.16), 0 3px 6px toRGBA(_darker($color, 30), 0.23);
        #{$varname}-active : none;
        transition: box-shadow $base-easing-time $base-easing;
    }
    @else if $level == 3
    {
        #{$varname}: toRGBA(_darker($color, 30), 0.20) 0px 5px 5px -3px, toRGBA(_darker($color, 30), 0.14) 0px 8px 10px 1px, toRGBA(_darker($color, 30), 0.12) 0px 3px 14px 2px ;
        #{$varname}-hover: 0 10px 20px toRGBA(_darker($color, 30), 0.19), 0 6px 6px toRGBA(_darker($color, 30), 0.23);
        #{$varname}-active : none;
        transition: box-shadow $base-easing-time $base-easing;
    }
}

@function toRGB($color)
{
    @return rgb(red($color), green($color), blue($color));
}

@function toRGBA($color, $alpha: 1)
{
    @return rgba(toRGB($color), $alpha);
}


// RGBA to RGB
@function RGBAtoRGB($rgba, $background: #fff) {
    @return mix(rgb(red($rgba), green($rgba), blue($rgba)), $background, alpha($rgba) * 100%)
}

// ICONS
@mixin glyphIcon()
{
    font-family: "IcoMoon" !important;
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;    
    letter-spacing: 0;
    -webkit-font-feature-settings: "liga";
    -moz-font-feature-settings: "liga=1";
    -moz-font-feature-settings: "liga";
    -ms-font-feature-settings: "liga" 1;
    -o-font-feature-settings: "liga";
    font-feature-settings: "liga";
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

// ------ PRIVATE -------
// Utility
@function _minusPercent($value, $percentage)
{
	$diff: $value * ($percentage / 100);
	@return $value - $diff;
}
@function _addPercent($value, $percentage)
{
	$diff: $value * ($percentage / 100);
	@return $value + $diff;
}

// Font smoothing
@mixin _fontSmooth()
{
	@if $font-smoothing
    {
      text-rendering: optimizeLegibility;
      font-smoothing: antialiased;
   		-webkit-font-smoothing: antialiased;
    	-moz-osx-font-smoothing: grayscale;
  }
}

// Text ellipsis
@mixin _ellipsis
{
	overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// Clearfix
@mixin _clearfix
{
	&:after
    {
    	content: "";
    	display: table;
    	clear: both;
  	}
}

// Unstyled button
@mixin button-unstyled()
{
    background-color: transparent;
    border: none;
    outline: none;
    cursor: pointer;

    &:hover,
    &.hover,
    &:active,
    &.active
    {
        background-color: transparent;
        border: none;
        outline: none;
    }
}

// icons
@mixin glyph-icon
{
    display: inline-block;
    font: normal normal normal 14px/1 'IcoMoon';
    font-size: inherit;
    text-rendering: auto;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}
@mixin center-horizontal
{
    float: none;
    margin-left: auto;
    margin-right: auto;
}
@mixin center-vertical
{
    position: absolute;
    top: 50%;
    left: 50%;
}

// Colors
@function _lighter($color, $percentage)
{
    @return mix(white, $color, $percentage);
}
@function _darker($color, $percentage)
{
    @return mix(black, $color, $percentage);
}


